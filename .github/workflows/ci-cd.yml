name: Build and Deploy

env:
  APP: 'Netcorext.Auth.API'
  APP_AUTHENTICATION: 'Netcorext.Auth.Authentication'
  APP_AUTHORIZATION: 'Netcorext.Auth.Authorization'

on:
  push:
    branches:
      - main
      - dev
      - stg

  workflow_dispatch:
    inputs:
      force:
        description: 'Force exec'
        type: boolean
        required: true

jobs:
  Detect:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ join(steps.detect.outputs.api) }}
      authentication: ${{ join(steps.detect.outputs.authentication) }}
      authorization: ${{ join(steps.detect.outputs.authorization) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Detect Change
        id: detect
        run: |
          CHANGE_FILE=`git diff --no-commit-id --name-only HEAD^ | grep -Em 1 "${{ env.APP }}" || true`
          if [ ! -z "$CHANGE_FILE" ] || [ ${{ inputs.force }} ]; then
            echo "api=Y" >> $GITHUB_OUTPUT
          else
            echo "api=N" >> $GITHUB_OUTPUT
          fi
          
          CHANGE_FILE=`git diff --no-commit-id --name-only HEAD^ | grep -Em 1 "${{ env.APP_AUTHENTICATION }}" || true`
          if [ ! -z "$CHANGE_FILE" ] || [ ${{ inputs.force }} ]; then
            echo "authentication=Y" >> $GITHUB_OUTPUT
          else
            echo "authentication=N" >> $GITHUB_OUTPUT
          fi
          
          CHANGE_FILE=`git diff --no-commit-id --name-only HEAD^ | grep -Em 1 "${{ env.APP_AUTHORIZATION }}" || true`
          if [ ! -z "$CHANGE_FILE" ] || [ ${{ inputs.force }} ]; then
            echo "authorization=Y" >> $GITHUB_OUTPUT
          else
            echo "authorization=N" >> $GITHUB_OUTPUT
          fi
                    
          CHANGE_FILE=`git diff --no-commit-id --name-only HEAD^ | grep -Em 1 'Netcorext.Auth.Core' || true`
          if [ ! -z "$CHANGE_FILE" ]; then
            echo "api=Y" >> $GITHUB_OUTPUT
            echo "authentication=Y" >> $GITHUB_OUTPUT
            echo "authorization=Y" >> $GITHUB_OUTPUT
          fi
  BuildApi:
    needs: Detect
    if: needs.Detect.outputs.api == 'Y'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: envs
        uses: netcorext/dotnet-version-action@dev
        with:
          app: ${{ env.APP }}
          image-prefix: ${{ secrets.IMAGE_PREFIX }}
      - uses: netcorext/dotnet-dockerfile-action@dev
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Image & Push
        uses: netcorext/buildx-image-action@dev
        with:
          image: ${{ steps.envs.outputs.image-fullName }}
          tag: ${{ steps.envs.outputs.tag }}
          tag-hash: ${{ steps.envs.outputs.tag-hash }}
          tag-latest: ${{ steps.envs.outputs.tag-latest }}
          build-arg: |-
            --build-arg APP="${{ steps.envs.outputs.app }}" \
            --build-arg ADDITIONAL_ARGUMENTS="${{ steps.envs.outputs.build-options }}"
  BuildAuthentication:
    needs: Detect
    if: needs.Detect.outputs.authentication == 'Y'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: envs
        uses: netcorext/dotnet-version-action@dev
        with:
          app: ${{ env.APP_AUTHENTICATION }}
          image-prefix: ${{ secrets.IMAGE_PREFIX }}
      - uses: netcorext/dotnet-dockerfile-action@dev
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Image & Push
        uses: netcorext/buildx-image-action@dev
        with:
          image: ${{ steps.envs.outputs.image-fullName }}
          tag: ${{ steps.envs.outputs.tag }}
          tag-hash: ${{ steps.envs.outputs.tag-hash }}
          tag-latest: ${{ steps.envs.outputs.tag-latest }}
          build-arg: |-
            --build-arg APP="${{ steps.envs.outputs.app }}" \
            --build-arg ADDITIONAL_ARGUMENTS="${{ steps.envs.outputs.build-options }}"
  BuildAuthorization:
    needs: Detect
    if: needs.Detect.outputs.authorization == 'Y'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - id: envs
        uses: netcorext/dotnet-version-action@dev
        with:
          app: ${{ env.APP_AUTHORIZATION }}
          image-prefix: ${{ secrets.IMAGE_PREFIX }}
      - uses: netcorext/dotnet-dockerfile-action@dev
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Image & Push
        uses: netcorext/buildx-image-action@dev
        with:
          image: ${{ steps.envs.outputs.image-fullName }}
          tag: ${{ steps.envs.outputs.tag }}
          tag-hash: ${{ steps.envs.outputs.tag-hash }}
          tag-latest: ${{ steps.envs.outputs.tag-latest }}
          build-arg: |-
            --build-arg APP="${{ steps.envs.outputs.app }}" \
            --build-arg ADDITIONAL_ARGUMENTS="${{ steps.envs.outputs.build-options }}"