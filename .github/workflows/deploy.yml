name: Build and Deploy Image

on:
  push:
    branches: [ main, dev ]

env:
  NUGET_API_URL: https://api.nuget.org/v3/index.json

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Install dotnet tool
        run: dotnet tool install -g --prerelease netcorext.tools.assemblyinfo
      - name: Set Environments
        run: |
          BRANCH="${GITHUB_REF##*/}"
          COMMIT_SHORT_SHA=`git rev-parse --short ${GITHUB_SHA}`
          COMMIT_COUNT=`git rev-list --count HEAD`
          COMMIT_TIME=`git show -s --format=%ct HEAD`
          ADDITIONAL_ARGUMENTS="-c Debug --version-suffix ${BRANCH}.${COMMIT_TIME}+${COMMIT_SHORT_SHA}"

          if [ "$BRANCH" = "main" ]; then
            ADDITIONAL_ARGUMENTS="-c Release"
          fi
    
          dotnet build src/Netcorext.Auth.Authentication/Netcorext.Auth.Authentication.csproj -o ./dist
          
          ASSEMBLY_VERSION=`asm-info ./dist/Netcorext.Auth.Authentication.dll --simple --version`
          
          rm -rf ./dist
          
          IMAGE_VERSION="${ASSEMBLY_VERSION}-${BRANCH}.${COMMIT_TIME}"
          
          if [ "$BRANCH" = "main" ]; then
            IMAGE_VERSION="${ASSEMBLY_VERSION}"
          fi
          
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "COMMIT_SHORT_SHA=$COMMIT_SHORT_SHA" >> $GITHUB_ENV
          echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_ENV
          echo "COMMIT_TIME=$COMMIT_TIME" >> $GITHUB_ENV
          echo "ADDITIONAL_ARGUMENTS=$ADDITIONAL_ARGUMENTS" >> $GITHUB_ENV
          echo "ASSEMBLY_VERSION=$ASSEMBLY_VERSION" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
      - name: Create Dockerfile
        run: |
          cat > dockerfile << EOF
          FROM mcr.microsoft.com/dotnet/aspnet:6.0-alpine AS base
          ENV ASPNETCORE_ENVIRONMENT=Production
          WORKDIR /app
          VOLUME [ "/app/appsettings.override.json" ]
          EXPOSE 80 443

          FROM mcr.microsoft.com/dotnet/sdk:6.0-alpine AS build
          ARG APP=
          WORKDIR /sources
          COPY . /sources
          WORKDIR src/\${APP}
          RUN dotnet restore --no-cache
          RUN dotnet publish ${{ env.ADDITIONAL_ARGUMENTS }} -o /dist 

          FROM base AS final
          WORKDIR /app
          COPY --from=build /dist .
          ENTRYPOINT export APP=\$(basename *.runtimeconfig.json .runtimeconfig.json) && dotnet \$APP.dll
          EOF
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Netcorext.Auth.Authentication image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          build-args: APP=Netcorext.Auth.Authentication
          tags: |
            netcorext/netcorext.auth.authentication:${{ env.COMMIT_SHORT_SHA }}
            netcorext/netcorext.auth.authentication:${{ env.IMAGE_VERSION }}
      - name: Build and push Netcorext.Auth.Authorization image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          build-args: APP=Netcorext.Auth.Authorization
          tags: |
            netcorext/netcorext.auth.authorization:${{ env.COMMIT_SHORT_SHA }}
            netcorext/netcorext.auth.authorization:${{ env.IMAGE_VERSION }}
      - name: Build and push Netcorext.Auth.API image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          build-args: APP=Netcorext.Auth.API
          tags: |
            netcorext/netcorext.auth.api:${{ env.COMMIT_SHORT_SHA }}
            netcorext/netcorext.auth.api:${{ env.IMAGE_VERSION }}